name: "Static Analysis"
on: [push]
jobs:
  clang_tidy:
    timeout-minutes: 30
    name: "Clang Tidy"
    runs-on: ubuntu-latest
    steps:
      - name: Install needed tools and system libraries
        run: |
          echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main" | sudo tee -a /etc/apt/sources.list
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo apt remove -y "libclang-dev*"
          sudo apt remove -y "clang*"
          sudo apt remove -y "llvm*"
          sudo apt update
          sudo apt install ninja-build libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev clang-tidy-14
      - uses: actions/checkout@v3
      - name: Set vcpkg environment vars
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_BINARY_CACHE=$HOME/vcpkg_cache" >> $GITHUB_ENV
      - name: Create vcpkg cache directory
        run: mkdir ~/vcpkg_cache
      - name: Cache vcpkg binaries
        uses: actions/cache@v3
        with:
          path: ~/vcpkg_cache
          key: ubuntu-latest-clang-Debug-${{hashFiles('vcpkg.json')}}
      - name: Configure
        run: cmake -S . --preset gcc -G "Ninja" -DCMAKE_BUILD_TYPE=Debug
      - name: Remove 'external' and 'tests' from compile_commands.json
        run: cat ./build/gcc/compile_commands.json | jq 'map(select(.file | test("external|tests") | not))' > ./build/compile_commands.json
      - name: Run clang-tidy
        run: |
          find -regex ".*\.\(cpp\|hpp\)" -not -path "./build/**" -not -path "./external/**" -not -path "./tests/**" | xargs clang-tidy-14 -p ./build/ -quiet -warnings-as-errors "\*"
  cppcheck:
    timeout-minutes: 30
    name: "Cppcheck"
    runs-on: ubuntu-22.04
    steps:
      - name: Install needed tools and system libraries
        run: |
          sudo apt update
          sudo apt install ninja-build libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev cppcheck
      - uses: actions/checkout@v3
      - name: Set vcpkg environment vars
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_BINARY_CACHE=$HOME/vcpkg_cache" >> $GITHUB_ENV
      - name: Create vcpkg cache directory
        run: mkdir ~/vcpkg_cache
      - name: Cache vcpkg binaries
        uses: actions/cache@v3
        with:
          path: ~/vcpkg_cache
          key: ubuntu-jammmy-clang-${{hashFiles('vcpkg.json')}}
      - name: Configure
        run: cmake -S . --preset gcc -G "Ninja"
      - name: Run cppcheck
        run: |
          cppcheck --version
          cppcheck --project=./build/gcc/compile_commands.json -iexternal -itests --error-exitcode=1 --enable=style -q --suppress="internalAstError" --suppress="passedByValue"
  include-what-you-use:
    timeout-minutes: 30
    name: "Include what you use"
    runs-on: ubuntu-18.04
    steps:
      - name: Install needed tools and system libraries
        run: |
          echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-15 main" | sudo tee -a /etc/apt/sources.list
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo apt update
          sudo apt remove -y "libclang-dev*"
          sudo apt remove -y "clang*"
          sudo apt remove -y "llvm*"
          sudo apt install ninja-build libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev jq llvm-15-dev libclang-15-dev clang-15 libc++-15-dev libc++abi-15-dev
      - name: Build latest include-what-you-use
        run: |
          mkdir ~/iwyu
          cd ~/iwyu
          git clone https://github.com/include-what-you-use/include-what-you-use.git
          cd ./include-what-you-use
          cmake -S . -B ./build -G "Ninja" -DCMAKE_C_COMPILER=clang-15 -DCMAKE_CXX_COMPILER=clang++-15
          cmake --build ./build
      - uses: actions/checkout@v3
      - name: Set vcpkg environment vars
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_BINARY_CACHE=$HOME/vcpkg_cache" >> $GITHUB_ENV
      - name: Create vcpkg cache directory
        run: mkdir ~/vcpkg_cache
      - name: Cache vcpkg binaries
        uses: actions/cache@v3
        with:
          path: ~/vcpkg_cache
          key: ubuntu-bionic-clang-libcpp-${{hashFiles('vcpkg.json')}}
      - name: Configure
        run: cmake -S . --preset clang_linux -G "Ninja" -DCMAKE_C_COMPILER=clang-15 -DCMAKE_CXX_COMPILER=clang++-15 -DCMAKE_CXX_COMPILER_FLAGS="-stdlib=libc++"
      - name: Remove 'external' and 'tests' from compile_commands.json
        run: cat ./build/clang_linux/compile_commands.json | jq 'map(select(.file | test("external|tests") | not))' > ./build/compile_commands.json
      - name: Run iwyu
        # intentionally letting iwyu return 0 even if there are suggestions, since there are unavoidable false positives right now
        run: |
          export PATH=$PATH:~/iwyu/include-what-you-use/build/bin/
          include-what-you-use --version
          python ~/iwyu/include-what-you-use/iwyu_tool.py -p ./build -j2 -- -Xiwyu --mapping_file=$PWD/iwyu.imp -Xiwyu --cxx17ns -Xiwyu --quoted_includes_first
