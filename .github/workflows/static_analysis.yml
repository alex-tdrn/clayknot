name: "Static Analysis"
on: [push]
jobs:
  clang_tidy:
    timeout-minutes: 30
    name: "Clang Tidy"
    runs-on: ubuntu-latest
    steps:
      - name: Install needed tools and system libraries
        run: |
          echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main" | sudo tee -a /etc/apt/sources.list
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo apt update
          sudo apt install ninja-build libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev clang-tidy-13
      - uses: actions/checkout@v3
      - name: Set vcpkg environment vars
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_BINARY_CACHE=$HOME/vcpkg_cache" >> $GITHUB_ENV
      - name: Create vcpkg cache directory
        run: mkdir ~/vcpkg_cache
      - name: Cache vcpkg binaries
        uses: actions/cache@v3
        with:
          path: ~/vcpkg_cache
          key: ubuntu-latest-clang-Debug-${{hashFiles('vcpkg.json')}}
      - name: Configure
        run: cmake -S . --preset clang_vcpkg -G "Ninja" -DCMAKE_BUILD_TYPE=Debug
      - name: Remove 'external' and 'tests' from compile_commands.json
        run: cat ./build/clang_vcpkg/compile_commands.json | jq 'map(select(.file | test("external|tests") | not))' > ./build/compile_commands.json
      - name: Run clang-tidy
        run: |
          run-clang-tidy-13 -p ./build -j2 -quiet
  cppcheck:
    timeout-minutes: 30
    name: "Cppcheck"
    runs-on: ubuntu-22.04
    steps:
      - name: Install needed tools and system libraries
        run: |
          sudo apt update
          sudo apt install ninja-build libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev cppcheck
      - uses: actions/checkout@v3
      - name: Set vcpkg environment vars
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_BINARY_CACHE=$HOME/vcpkg_cache" >> $GITHUB_ENV
      - name: Create vcpkg cache directory
        run: mkdir ~/vcpkg_cache
      - name: Cache vcpkg binaries
        uses: actions/cache@v3
        with:
          path: ~/vcpkg_cache
          key: ubuntu-jammmy-clang-${{hashFiles('vcpkg.json')}}
      - name: Configure
        run: cmake -S . --preset clang_vcpkg -G "Ninja"
      - name: Run cppcheck
        run: |
          cppcheck --version
          cppcheck --project=./build/clang_vcpkg/compile_commands.json -iexternal -itests --error-exitcode=1 --enable=style -q --suppress="internalAstError" --suppress="passedByValue"
  include-what-you-use:
    timeout-minutes: 30
    name: "Include what you use"
    runs-on: ubuntu-22.04
    steps:
      - name: Install needed tools and system libraries
        run: |
          echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main" | sudo tee -a /etc/apt/sources.list
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo apt update
          sudo apt install ninja-build libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev iwyu jq clang-13 libc++-13-dev libc++abi-13-dev
          sudo ln -s /usr/bin/include-what-you-use /usr/lib/llvm-13/bin/include-what-you-use
      - uses: actions/checkout@v3
      - name: Set vcpkg environment vars
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_BINARY_CACHE=$HOME/vcpkg_cache" >> $GITHUB_ENV
      - name: Create vcpkg cache directory
        run: mkdir ~/vcpkg_cache
      - name: Cache vcpkg binaries
        uses: actions/cache@v3
        with:
          path: ~/vcpkg_cache
          key: ubuntu-jammmy-clang-${{hashFiles('vcpkg.json')}}
      - name: Configure
        run: cmake -S . --preset clang_vcpkg -G "Ninja"
      - name: Remove 'external' and 'tests' from compile_commands.json
        run: cat ./build/clang_vcpkg/compile_commands.json | jq 'map(select(.file | test("external|tests") | not))' > ./build/compile_commands.json
      - name: Download iwyu_tool.py
        run: |
          wget https://raw.githubusercontent.com/include-what-you-use/include-what-you-use/master/iwyu_tool.py
          chmod +x iwyu_tool.py
      - name: Run iwyu
        # iwyu returns 2 when there are no suggestions. this is fixed in version 0.18. until then, look at the error code, and
        # treat 2 as success. need to disable bash '-e' for this
        run: |
          set +e
          set +o pipefail
          include-what-you-use --version
          python iwyu_tool.py -p ./build -j2 -- -Xiwyu --mapping_file=$PWD/iwyu.imp -Xiwyu --cxx17ns -Xiwyu --quoted_includes_first -stdlib=libc++
          export iwyu_status=$?
          echo iwyu status was $iwyu_status
          ([ $iwyu_status -eq 0 ] || [ $iwyu_status -eq 2 ]) && exit 0 || exit 1
