name: "Tests"
on: [push]
jobs:
  run_tests:
    name: "Run"
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        preset: [gcc, clang_linux, msvc, clang-cl, clang_windows]
        config: [Debug, Release]
        os: [ubuntu-latest, windows-latest]
        include:
          - preset: gcc
            config: ASan
            os: ubuntu-latest
          - preset: gcc
            config: UBSan
            os: ubuntu-latest
        exclude:
          - os: ubuntu-latest
            preset: msvc
          - os: ubuntu-latest
            preset: clang-cl
          - os: ubuntu-latest
            preset: clang_windows
          - os: windows-latest
            preset: gcc
          - os: windows-latest
            preset: clang_linux
    runs-on: ${{matrix.os}}
    steps:
      - name: Install needed tools (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install ninja
      - name: Install needed tools and system libraries (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install ninja-build libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev
      - uses: actions/checkout@v3
      - name: Set vcpkg environment vars
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_BINARY_CACHE=$HOME/vcpkg_cache" >> $GITHUB_ENV
      - name: Create vcpkg cache directory
        run: mkdir ~/vcpkg_cache
      - name: Cache vcpkg binaries
        uses: actions/cache@v3
        with:
          path: ~/vcpkg_cache
          key: ${{matrix.os}}-${{matrix.preset}}-${{matrix.config}}-${{hashFiles('vcpkg.json')}}
      - name: Set msvc environment vars
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Configure
        run: cmake -S . --preset ${{matrix.preset}} -G "Ninja" -DCMAKE_BUILD_TYPE=${{matrix.config}} -DTREAT_WARNINGS_AS_ERRORS=${{matrix.config != 'Release'}}
      - name: Build
        run: cmake --build build
      - name: Run 'base' tests
        run: build/tests/tests "[base]" --name base_tests --reporter junit --out test_results_base.xml
      - name: Run 'util' tests
        run: build/tests/tests "[util]" --name util_tests --reporter junit --out test_results_util.xml
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "test_results_${{matrix.preset}}_${{matrix.config}}"
          path: "test_results_*.xml"

  collect_results:
    name: "Collect Results"
    needs: run_tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download results
        uses: actions/download-artifact@v3
        with:
          path: results
      - name: Publish results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: "Results 'util'"
          files: "results/**/test_results_util.xml"
      - name: Publish results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: "Results 'base'"
          files: "results/**/test_results_base.xml"
